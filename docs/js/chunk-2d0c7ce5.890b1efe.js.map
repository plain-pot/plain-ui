{"version":3,"sources":["webpack:///./story/pages/table/span/table-rowspan.vue","webpack:///./story/pages/table/span/table-rowspan.vue?0a57"],"names":["class","title","data","item","index","key","spanMethod","border","field","name","first","second","third","prevIndex","spanMap","collapseField","initMap","reduce","ret","forEach","map","push","methods","node","plc","colspan","rowspan","this","props","render"],"mappings":"4IACSA,MAAM,iB,qKAAX,eAaM,MAbN,EAaM,CAZF,eAA8B,GAAnBC,MAAM,cACjB,eAIK,Y,mBAHD,eAEK,2BAFsB,EAAAC,MAAI,SAAnBC,EAAKC,G,wBAAjB,eAEK,MAF6BC,IAAKD,GAAK,eACtCD,GAAI,M,QAGd,eAKW,GALAD,KAAM,EAAAA,KAAOI,WAAY,EAAAA,WAAYC,OAAA,I,yBAC5C,iBAAY,CAAZ,eAAY,GACZ,eAAiC,GAA5BN,MAAM,OAAOO,MAAM,UACxB,eAAkC,GAA7BP,MAAM,OAAOO,MAAM,WACxB,eAAiC,GAA5BP,MAAM,OAAOO,MAAM,c,oEAOjB,GACXC,KAAM,gBACNP,KAFW,WAIP,IAAMA,EAAO,CACT,CAACQ,MAAO,IAAKC,OAAQ,MAAOC,MAAO,SACnC,CAACF,MAAO,IAAKC,OAAQ,MAAOC,MAAO,SACnC,CAACF,MAAO,IAAKC,OAAQ,MAAOC,MAAO,SACnC,CAACF,MAAO,IAAKC,OAAQ,MAAOC,MAAO,SACnC,CAACF,MAAO,IAAKC,OAAQ,MAAOC,MAAO,SACnC,CAACF,MAAO,IAAKC,OAAQ,MAAOC,MAAO,SACnC,CAACF,MAAO,IAAKC,OAAQ,MAAOC,MAAO,SACnC,CAACF,MAAO,IAAKC,OAAQ,MAAOC,MAAO,UAGjCC,EAAY,CACdH,MAAO,EACPC,OAAQ,EACRC,MAAO,GAGLE,EAAU,GACVC,EAAgB,CAAC,QAAS,UAC1BC,EAAUD,EAAcE,QAAO,SAACC,EAAKf,GAEvC,OADAe,EAAIf,GAAQ,EACLe,IACR,IAyBH,OAvBAhB,EAAKiB,SAAQ,SAAChB,EAAMC,GAEhB,IAAMgB,EAAE,kBAAQJ,GAEF,IAAVZ,GAKJW,EAAcI,SAAQ,SAAAd,GACdF,EAAKE,KAASH,EAAKW,EAAUR,IAAMA,IACnCS,EAAQD,EAAUR,IAAMA,KACxBe,EAAIf,GAAO,GAEXQ,EAAUR,GAAOD,KAIzBU,EAAQO,KAAKD,IAbTN,EAAQO,KAAKD,MAkBd,CACHlB,OACAY,YAGRQ,QAAS,CACLhB,WADK,YACmB,IAAZiB,EAAY,EAAZA,KAAMC,EAAM,EAANA,IACd,MAAO,CACHC,QAAS,EACTC,QAAsD,MAA7CC,KAAKb,QAAQS,EAAKnB,OAAOoB,EAAII,MAAMpB,OAAiBmB,KAAKb,QAAQS,EAAKnB,OAAOoB,EAAII,MAAMpB,OAAS,MC5E7H,EAAOqB,OAASA,EAED","file":"js/chunk-2d0c7ce5.890b1efe.js","sourcesContent":["<template>\r\n    <div class=\"table-rowspan\">\r\n        <demo-line title=\"字段值相同则合并行\"/>\r\n        <ul>\r\n            <li v-for=\"(item,index) in data\" :key=\"index\">\r\n                {{item}}\r\n            </li>\r\n        </ul>\r\n        <pl-table :data=\"data\" :spanMethod=\"spanMethod\" border>\r\n            <plc-index/>\r\n            <plc title=\"一级标题\" field=\"first\"/>\r\n            <plc title=\"二级标题\" field=\"second\"/>\r\n            <plc title=\"三级标题\" field=\"third\"/>\r\n        </pl-table>\r\n    </div>\r\n</template>\r\n\r\n<script>\r\n\r\n    export default {\r\n        name: \"table-rowspan\",\r\n        data() {\r\n\r\n            const data = [\r\n                {first: '1', second: '1-1', third: '1-1-1'},\r\n                {first: '1', second: '1-1', third: '1-1-2'},\r\n                {first: '1', second: '1-1', third: '1-1-3'},\r\n                {first: '1', second: '1-2', third: '1-2-1'},\r\n                {first: '1', second: '1-3', third: '1-3-1'},\r\n                {first: '2', second: '2-1', third: '2-1-1'},\r\n                {first: '2', second: '2-1', third: '2-1-2'},\r\n                {first: '2', second: '2-2', third: '2-2-1'},\r\n            ]\r\n\r\n            const prevIndex = {\r\n                first: 0,\r\n                second: 0,\r\n                third: 0,\r\n            }\r\n\r\n            const spanMap = []\r\n            const collapseField = ['first', 'second']\r\n            const initMap = collapseField.reduce((ret, item) => {\r\n                ret[item] = 1\r\n                return ret\r\n            }, {})\r\n\r\n            data.forEach((item, index) => {\r\n\r\n                const map = {...initMap}\r\n\r\n                if (index === 0) {\r\n                    spanMap.push(map)\r\n                    return\r\n                }\r\n\r\n                collapseField.forEach(key => {\r\n                    if (item[key] === data[prevIndex[key]][key]) {\r\n                        spanMap[prevIndex[key]][key]++\r\n                        map[key] = 0\r\n                    } else {\r\n                        prevIndex[key] = index\r\n                    }\r\n                })\r\n\r\n                spanMap.push(map)\r\n            })\r\n\r\n            // console.log(JSON.parse(JSON.stringify(spanMap)))\r\n\r\n            return {\r\n                data,\r\n                spanMap,\r\n            }\r\n        },\r\n        methods: {\r\n            spanMethod({node, plc}) {\r\n                return {\r\n                    colspan: 1,\r\n                    rowspan: this.spanMap[node.index][plc.props.field] != null ? this.spanMap[node.index][plc.props.field] : 1,\r\n                }\r\n            },\r\n        }\r\n    }\r\n</script>\r\n\r\n<style lang=\"scss\">\r\n\r\n</style>","import { render } from \"./table-rowspan.vue?vue&type=template&id=53a483a3\"\nimport script from \"./table-rowspan.vue?vue&type=script&lang=js\"\nexport * from \"./table-rowspan.vue?vue&type=script&lang=js\"\nscript.render = render\n\nexport default script"],"sourceRoot":""}